/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////// Fill Cancer Type Select Box (below) /////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Returns an array of JSON objects, where each object has a key:value pair for 
// "cohort" (e.g., "BRCA") and "description" (e.g., "Breast invasive carcioma")
let fetchCohortData = async function() {
    const hosturl = 'https://firebrowse.herokuapp.com';
    const endpointurl='http://firebrowse.org/api/v1/Metadata/Cohorts';
    const endpointurl_presets = {format: 'json'};
    const endpointurl_fieldsWithValues = 'format=' + endpointurl_presets.format;
    let fetchedCohortData = await fetch(hosturl + '?' + endpointurl + '?' + endpointurl_fieldsWithValues).then(function(response) { return response.json(); });
    if (fetchedCohortData == '')              
        return ['Error: Invalid Input Fields for Query.', 0];
    else {
        console.log(fetchedCohortData["Cohorts"])
        return fetchedCohortData["Cohorts"];
    }
}

let fillCancerTypeSelectBox = async function() {
    let cancerTypesQuery = await fetchCohortData();
    cancerTypesQuery.sort();
    let selectBox = document.getElementById("cancerTypeMultipleSelection");
    for (let i = 0; i < cancerTypesQuery.length; i++) {
        let currentOption = document.createElement("option");
        currentOption.value = cancerTypesQuery[i]["cohort"];
        currentOption.text = "(" + cancerTypesQuery[i]["cohort"] + ") " + cancerTypesQuery[i]["description"];
        currentOption.id = cancerTypesQuery[i]["cohort"];
        selectBox.appendChild(currentOption);
    }
    return;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////// Fill Cancer Type Select Box (above) /////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// Fill Gene ID Select Box (below) ///////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

let getValidGeneList = async function() {
    let validGeneList = await fetch("https://raw.githubusercontent.com/web4bio/webgen/master/main/validGeneList.json").then(response => response.json());
    validGeneList = validGeneList.map(geneInfo => geneInfo.hugoSymbol);
    return await validGeneList
}

let fillGeneSelectBox = async function() {
    let geneList = await fetch("https://raw.githubusercontent.com/web4bio/webgen/master/main/geneList.json").then(response => response.json())
    let selectBox = document.getElementById("geneMultipleSelection");
    for(let i = 0; i < geneList.length; i++) {
        let currentOption = document.createElement("option");
        currentOption.value = geneList[i].hugoSymbol;
        currentOption.text = geneList[i].hugoSymbol;
        currentOption.id = geneList[i].hugoSymbol;
        selectBox.appendChild(currentOption);
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// Fill Gene ID Select Box (above) ///////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// Fill Mutation Select Box (below) ///////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

let fetchMutationData = async function() {
    let myGeneQuery = $('.geneMultipleSelection').select2('data').map(geneInfo => geneInfo.text);
    let myCohortQuery = $('.cancerTypeMultipleSelection').select2('data').map(cohortInfo => cohortInfo.text.match(/\(([^)]+)\)/)[1]);
    const hosturl = 'https://firebrowse.herokuapp.com';
    const endpointurl='http://firebrowse.org/api/v1/Analyses/Mutation/MAF';
    const endpointurl_presets = {
        format: 'json',
        cohort: myCohortQuery,  
        tool: 'MutSig2CV', 
        gene: myGeneQuery,  
        page: '1',
        page_size: 250,
        sort_by: 'cohort' 
    };
    const endpointurl_fieldsWithValues = 
        'format=' + endpointurl_presets.format + 
        '&cohort=' + endpointurl_presets.cohort.toString() + 
        '&tool=' + endpointurl_presets.tool + 
        '&gene=' + endpointurl_presets.gene +
        '&page=' + endpointurl_presets.page + 
        '&page_size=' + endpointurl_presets.page_size.toString() + 
        '&sort_by=' + endpointurl_presets.sort_by;
    let fetchedMutationData = await fetch(hosturl + '?' + endpointurl + '?' + endpointurl_fieldsWithValues).then(function(response) { return response.json(); });
    if (fetchedMutationData == '')              
        return ['Error: Invalid Input Fields for Query.', 0];
    else {
        return fetchedMutationData;
    }
}

let fillMutationSelectBox = async function() {
    let mutationQuery = await fetchMutationData();
    console.log(mutationQuery.MAF)
    let theMutationQuery = mutationQuery.MAF;
    let selectBox = document.getElementById("mutationMultipleSelection");
    while(selectBox.firstChild) {
        selectBox.removeChild(selectBox.firstChild);
    }
    let allVariantClassifications = [];
    for (let i = 0; i < theMutationQuery.length; i++) 
        allVariantClassifications.push(theMutationQuery[i].Variant_Classification)
    function getUniqueValues(value, index, self) { 
        return self.indexOf(value) === index;
    }
    let uniqueVariantClassifications = allVariantClassifications.filter(getUniqueValues);
    for (let i = 0; i < uniqueVariantClassifications.length; i++) {
        let currentOption = document.createElement("option");
        currentOption.value = uniqueVariantClassifications[i];
        currentOption.text = uniqueVariantClassifications[i];
        currentOption.id = uniqueVariantClassifications[i];
        selectBox.appendChild(currentOption);
    }
    return;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// Fill Mutation Select Box (above) ///////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////